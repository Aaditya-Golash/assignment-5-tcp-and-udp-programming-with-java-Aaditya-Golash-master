package IMClient;
/*
IMClient.java - Instant Message client using UDP and TCP communication.

Text-based communication of commands.
*/

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class IMClient {
	// Protocol and system constants
	public static String serverAddress = "localhost";
	public static int TCPServerPort = 1234;					// connection to server
	
	/* 	
	 * This value will need to be unique for each client you are running
	 */
	public static int TCPMessagePort = 1248;				// port for connection between 2 clients
	
	public static String onlineStatus = "100 ONLINE";
	public static String offlineStatus = "101 OFFLINE";

	private BufferedReader reader;							// Used for reading from standard input

	// Client state variables
	private String userId;
	private String status;

	// Networking threads and state
	private volatile boolean running = true;
	private Thread udpThread;
	private Thread tcpMessengerThread;
	private DatagramSocket udpSocket;
	private ServerSocket serverSocket; // welcome socket for buddy connections

	// Buddy list state (updated by UDP thread)
	private ArrayList<BuddyStatusRecord> buddyList = new ArrayList<BuddyStatusRecord>();

	// Incoming/outgoing chat state
	private volatile Socket pendingIncomingSocket = null;
	private volatile Socket activeChatSocket = null;
	private volatile boolean chatMode = false;
	private BufferedReader activeChatIn = null;
	private DataOutputStream activeChatOut = null;
	private Thread chatReceiverThread = null;

	public static void main(String []argv) throws Exception
	{
		IMClient client = new IMClient();
		client.execute();
	}

	public IMClient()
	{
		// Initialize variables
		userId = null;
		status = null;
	}


	public void execute()
	{
		initializeThreads();

		String choice;
		reader = new BufferedReader(new InputStreamReader(System.in));

		printMenu();
		choice = getLine().toUpperCase();

		while (!choice.equals("X"))
		{
			if (choice.equals("Y"))
			{	// Must have accepted an incoming connection
				acceptConnection();
			}
			else if (choice.equals("N"))
			{	// Must have rejected an incoming connection
				rejectConnection();
			}
			else if (choice.equals("R"))				// Register
			{	registerUser();
			}
			else if (choice.equals("L"))		// Login as user id
			{	loginUser();
			}
			else if (choice.equals("A"))		// Add buddy
			{	addBuddy();
			}
			else if (choice.equals("D"))		// Delete buddy
			{	deleteBuddy();
			}
			else if (choice.equals("S"))		// Buddy list status
			{	buddyStatus();
			}
			else if (choice.equals("M"))		// Start messaging with a buddy
			{	buddyMessage();
			}
			else
				System.out.println("Invalid input!");

			printMenu();
			choice = getLine().toUpperCase();
		}
		shutdown();
	}

	private void initializeThreads()
	{
		try {
			// Create welcome server socket on ephemeral port and start TCP messenger thread
			serverSocket = new ServerSocket(0);
			TCPMessagePort = serverSocket.getLocalPort();
			TCPMessenger messenger = new TCPMessenger(this, serverSocket);
			tcpMessengerThread = new Thread(messenger);
			tcpMessengerThread.setDaemon(true);
			tcpMessengerThread.start();

			// Start UDP sender/receiver thread (single loop with timeout)
			udpThread = new Thread(new Runnable() {
				public void run() { udpLoop(); }
			});
			udpThread.setDaemon(true);
			udpThread.start();
		}
		catch (IOException e) {
			System.out.println(e);
		}
	}

	private void registerUser()
	{	// Register user id
		System.out.print("Enter user id: ");
		String uid = getLine();
		if (uid == null || uid.trim().length() == 0) {
			System.out.println("201 INVALID");
			return;
		}
		uid = uid.trim().toLowerCase();
		System.out.println("Registering user id: "+uid);
		String response = tcpRequest("REG "+uid);
		if (response != null) System.out.println(response);
		if (response != null && response.startsWith("200")) {
			userId = uid;
			status = onlineStatus;
		}
	}

	private void loginUser()
	{	// Login an existing user (no verification required - just set userId to input)
		System.out.print("Enter user id: ");
		userId = getLine();
		System.out.println("User id set to: "+userId);
		status = onlineStatus;
	}

	private void addBuddy()
	{	// Add buddy if have current user id
		if (userId == null || userId.trim().isEmpty()) {
			System.out.println("No user id. Please register or login first.");
			return;
		}
		System.out.print("Enter buddy id: ");
		String buddyId = getLine();
		if (buddyId == null || buddyId.trim().isEmpty()) {
			System.out.println("201 INVALID");
			return;
		}
		buddyId = buddyId.trim().toLowerCase();
		String response = tcpRequest("ADD "+userId.toLowerCase()+" "+buddyId);
		if (response != null) System.out.println(response);
	}

	private void deleteBuddy()
	{	// Delete buddy if have current user id
		if (userId == null || userId.trim().isEmpty()) {
			System.out.println("No user id. Please register or login first.");
			return;
		}
		System.out.print("Enter buddy id: ");
		String buddyId = getLine();
		if (buddyId == null || buddyId.trim().isEmpty()) {
			System.out.println("201 INVALID");
			return;
		}
		buddyId = buddyId.trim().toLowerCase();
		String response = tcpRequest("DEL "+userId.toLowerCase()+" "+buddyId);
		if (response != null) System.out.println(response);
	}

	private void buddyStatus()
	{	// Print out buddy status (need to store state in instance variable that received from previous UDP message)
		System.out.println("My buddy list:");
		ArrayList<BuddyStatusRecord> snapshot;
		synchronized(this) {
			snapshot = new ArrayList<BuddyStatusRecord>(buddyList);
		}
		for (BuddyStatusRecord b : snapshot) {
			System.out.println(b.toString());
		}
	}

	private void buddyMessage()
	{	// Make connection to a buddy that is online
		// Must verify that they are online and should prompt to see if they accept the connection
		if (userId == null || userId.trim().isEmpty()) {
			System.out.println("No user id. Please register or login first.");
			return;
		}
		if (activeChatSocket != null || chatMode) {
			System.out.println("Already in a chat. Finish current chat first.");
			return;
		}
		System.out.print("Enter buddy id: ");
		String bid = getLine();
		if (bid == null || bid.trim().isEmpty()) return;
		bid = bid.trim();
		BuddyStatusRecord target = findBuddy(bid);
		if (target == null) {
			System.out.println("Buddy not found in list. Try S to refresh.");
			return;
		}
		if (!target.isOnline() || target.IPaddress == null || target.IPaddress.startsWith("unknown")) {
			System.out.println("Buddy is not online.");
			return;
		}
		try {
			int port = Integer.parseInt(target.buddyPort);
			System.out.println("Attempting to connect...");
			Socket s = new Socket(target.IPaddress, port);
			BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
			DataOutputStream out = new DataOutputStream(s.getOutputStream());
			// Send simple handshake
			out.writeBytes("HELLO "+userId+"\n");
			String reply = in.readLine();
			if (reply != null && reply.toUpperCase().startsWith("OK")) {
				System.out.println("Buddy accepted connection.");
				enterChatMode(s, in, out);
			} else {
				System.out.println("Buddy declined connection.");
				s.close();
			}
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	private void shutdown()
	{	// Close down client and all threads
		running = false;
		// Send offline status best-effort
		try { sendUdp("SET "+(userId==null?"":userId)+" "+offlineStatus+" "+TCPMessagePort); } catch (Exception e) { }
		try { if (udpSocket != null) udpSocket.close(); } catch (Exception e) { }
		try { if (activeChatSocket != null) activeChatSocket.close(); } catch (Exception e) { }
		try { if (serverSocket != null) serverSocket.close(); } catch (Exception e) { }
	}

	private void acceptConnection()
	{	// User pressed 'Y' on this side to accept connection from another user
		// Send confirmation to buddy over TCP socket
		// Enter messaging mode
		Socket s = pendingIncomingSocket;
		pendingIncomingSocket = null;
		if (s == null) {
			System.out.println("No incoming connection to accept.");
			return;
		}
		try {
			BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
			DataOutputStream out = new DataOutputStream(s.getOutputStream());
			// Expect a HELLO line; read and ignore content
			try { in.readLine(); } catch (Exception e) { }
			out.writeBytes("OK\n");
			System.out.println("Connection accepted.");
			enterChatMode(s, in, out);
		} catch (Exception e) {
			System.out.println(e);
			try { s.close(); } catch (Exception ex) { }
		}
	}

	private void rejectConnection()
	{	// User pressed 'N' on this side to decline connection from another user
		// Send no message over TCP socket then close socket
		Socket s = pendingIncomingSocket;
		pendingIncomingSocket = null;
		if (s == null) {
			System.out.println("No incoming connection to reject.");
			return;
		}
		try {
			// Inform caller
			DataOutputStream out = new DataOutputStream(s.getOutputStream());
			out.writeBytes("NO\n");
			s.close();
		} catch (Exception e) {
			System.out.println(e);
